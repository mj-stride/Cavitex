)
# ========== WAZE FEEDS PER HOUR ========== #
output$id_waze_hour <- renderUI({
waze_hour()
})
default_hour(input, output)
observeEvent(
input$id_search, {
input_date <- input$id_date
input_time <- strftime(input$id_time, '%H%M')
file_path <- paste(folder_path, input_date, input_time, sep = '\\')
file <- paste(file_path, '.json', sep = '')
if (file.exists(file)) {
map <- waze_draw_hour(file, input$id_type_hour)
output$id_map_waze_hour <- renderUI({
div(
map,
style = 'height: 90vh; overflow-y: auto;'
)
})
} else {
# no such file
showModal(
modalDialog(
title = 'No file found',
'Please choose other date or time.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
}
)
# ========== GOOGLE POPULAR TIMES ========== #
output$id_gpt <- renderUI({
sidebarLayout(
sidebarPanel(
style = 'height: 90vh;',
width = 4,
# search
div(
style = 'padding: 10px; margin-bottom: 30px',
h3('Google Popular Times', style = 'font-weight: bold; color: #46923C;'), # title
uiOutput(outputId = 'id_location')
),
# week picker
div(
style = 'padding: 10px;',
uiOutput(
outputId = 'id_week'
)
),
# graph
withSpinner(
color = '#46923C',
imageOutput(
outputId = 'id_graph'
)
)
),
mainPanel(
style = 'height: 90vh;',
width = 8,
withSpinner(
color = '#46923C',
uiOutput(
outputId = 'id_map_gpt'
)
)
)
)
})
location <- get_location()
if (location$status == 200) {
output$id_location <- renderUI({
selectInput(
inputId = 'id_toll_plaza',
width = '100%',
label = 'Location',
choices = location$location$name,
multiple = FALSE
)
})
} else {
# empty place name
showModal(
modalDialog(
title = 'Server connection',
'No fetched location.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
# search place; show map
observeEvent(
input$id_toll_plaza, {
# get location info
json_address <- r_to_py(get_address(input$id_toll_plaza))
address <<- json2vector(json_address)
# get day of week
day_week <<- weekdays(Sys.Date())
day_number <- get_week_of_day(day_week)
# get place information
df_place <- popular_times_graph(
input$id_toll_plaza,
address$coordinates.address,
day_week,
day_number
)
# create map
map <- leaflet(height = '100%') %>%
addTiles() %>%
addMarkers(
lng = as.double(address$coordinates.lng),
lat = as.double(address$coordinates.lat),
popup = paste(paste('<b>Name:</b>', input$id_toll_plaza, sep = ' '),
paste('<b>Address:</b>', address$coordinates.address, sep = ' '),
sep = '\n')
)
# render map
output$id_map_gpt <- renderUI({
div(
map,
style = 'height: 90vh; overflow-y: auto;'
)
})
# show week picker
output$id_week <- renderUI({
selectInput(
inputId = 'id_week_of_day',
width = '100%',
label = 'Week of the day',
choices = list('Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday', 'Sunday'),
selected = day_week,
multiple = FALSE
)
})
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '300px'),
deleteFile = FALSE
)
}
)
# week of the day picker
observeEvent(
input$id_week_of_day, {
# get day of week
if (input$id_week_of_day != day_week) {
day_number <- get_week_of_day(input$id_week_of_day)
# get place information
df_place <- popular_times_graph(
input$id_toll_plaza,
address$coordinates.address,
input$id_week_of_day,
day_number
)
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '300px'),
deleteFile = FALSE
)
} else {
# clear day_week
day_week <<- ''
}
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyTime)
library(shinycssloaders)
library(jsonlite)
library(tidyverse)
library(reticulate)
library(later)
library(lares)
library(lubridate)
# for google popular times
source('D:\\Codes\\cavitex\\google_popular_times\\get_week_of_day.R')
source('D:\\Codes\\cavitex\\google_popular_times\\google_popular_times.R')
source('D:\\Codes\\cavitex\\google_popular_times\\api\\api.R')
source_python('D:\\Codes\\cavitex\\google_popular_times\\api\\api.py')
# for waze
source('D:\\Codes\\cavitex\\waze\\draw_waze.R')
source('D:\\Codes\\cavitex\\waze\\waze_format.R')
date_now = format(Sys.time(), '%Y-%m-%d')
folder_path <- 'D:\\Codes\\cavitex\\waze\\downloaded_waze'
ui <- fillPage(
tags$head(
tags$style(
HTML(
'body { height: 100%; background-color: white; }',
'.id_search { float: right; background-color: #46923C; color: white; border: 2px solid #46923C; }'
)
)
),
navbarPage(
# position = c('fixed-top'),
title = 'CAVITEX',
tabPanel(
title = "Waze Data (in range)",
uiOutput(
outputId = 'id_waze'
)
),
tabPanel(
title = "Waze Data (hourly)",
uiOutput(
outputId = 'id_waze_hour'
)
),
tabPanel(
title = "Google Popular Times",
uiOutput(
outputId = 'id_gpt'
)
)
)
)
default_hour <- function(input, output) {
file_path <- paste(folder_path, date_now, strftime(Sys.time(), '%H%M'), sep = '\\')
file <- paste(file_path, '.json', sep = '')
if (file.exists(file)) {
map <- draw_poly_map(file, 'All')
output$id_map_waze <- renderUI({
div(
map,
style = 'height: 90vh; overflow-y: auto;'
)
})
} else {
# no such file
showModal(
modalDialog(
title = 'No file found',
'Please choose other date or time.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
}
default_range <- function(input, output) {
output$id_range_format <- renderUI({
waze_range('Time')
})
}
server <- function(input, output, session) {
# ========== WAZE FEEDS IN RANGE ========== #
output$id_waze <- renderUI({
sidebarLayout(
sidebarPanel(
style = 'height: 90vh;',
width = 3,
selectInput(
inputId = 'id_range',
label = 'Choose range type:',
choices = c('Time', 'Date'),
selected = 'Time',
width = '100%'
),
uiOutput(
outputId = 'id_range_format'
)
),
mainPanel(
style = 'height: 100%;',
width = 9,
withSpinner(
color = '#46923C',
uiOutput(
outputId = 'id_waze_output'
)
)
)
)
})
# default_range(input, output)
observeEvent(
input$id_range, {
output$id_range_format <- renderUI({
waze_range(input$id_range)
})
}
)
observeEvent(
input$id_search_range, {
date_start <- input$id_date_start
file <- paste(folder_path, date_start, sep = '\\')
if (input$id_range == 'Time') {
folder <- paste(folder_path, date_start, sep = '\\')
if (file.exists(folder)) {
time_start <- input$id_time_start
time_end <- input$id_time_end
waze_draw_time(folder, time_start, time_end, input$id_type_range, 'Imus', output)
output$id_waze_output <- renderUI({
div(
plotOutput(
outputId = 'id_plot'
),
style = 'height: 90vh; overflow-y: auto;'
)
})
# output$id_waze_output <- renderUI({
#   div(
#     graph,
#     style = 'height: 90vh; overflow-y: auto;'
#   )
# })
} else {
showModal(
modalDialog(
title = 'No file found',
'Please choose other date.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
} else {
date_end <- input$id_date_end
waze_draw_date(folder_path, date_start, date_end, input$id_type_range)
}
}
)
# ========== WAZE FEEDS PER HOUR ========== #
output$id_waze_hour <- renderUI({
waze_hour()
})
default_hour(input, output)
observeEvent(
input$id_search, {
input_date <- input$id_date
input_time <- strftime(input$id_time, '%H%M')
file_path <- paste(folder_path, input_date, input_time, sep = '\\')
file <- paste(file_path, '.json', sep = '')
if (file.exists(file)) {
map <- waze_draw_hour(file, input$id_type_hour)
output$id_map_waze_hour <- renderUI({
div(
map,
style = 'height: 90vh; overflow-y: auto;'
)
})
} else {
# no such file
showModal(
modalDialog(
title = 'No file found',
'Please choose other date or time.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
}
)
# ========== GOOGLE POPULAR TIMES ========== #
output$id_gpt <- renderUI({
sidebarLayout(
sidebarPanel(
style = 'height: 90vh;',
width = 4,
# search
div(
style = 'padding: 10px; margin-bottom: 30px',
h3('Google Popular Times', style = 'font-weight: bold; color: #46923C;'), # title
uiOutput(outputId = 'id_location')
),
# week picker
div(
style = 'padding: 10px;',
uiOutput(
outputId = 'id_week'
)
),
# graph
withSpinner(
color = '#46923C',
imageOutput(
outputId = 'id_graph'
)
)
),
mainPanel(
style = 'height: 90vh;',
width = 8,
withSpinner(
color = '#46923C',
uiOutput(
outputId = 'id_map_gpt'
)
)
)
)
})
location <- get_location()
if (location$status == 200) {
output$id_location <- renderUI({
selectInput(
inputId = 'id_toll_plaza',
width = '100%',
label = 'Location',
choices = location$location$name,
multiple = FALSE
)
})
} else {
# empty place name
showModal(
modalDialog(
title = 'Server connection',
'No fetched location.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
# search place; show map
observeEvent(
input$id_toll_plaza, {
# get location info
json_address <- r_to_py(get_address(input$id_toll_plaza))
address <<- json2vector(json_address)
# get day of week
day_week <<- weekdays(Sys.Date())
day_number <- get_week_of_day(day_week)
# get place information
df_place <- popular_times_graph(
input$id_toll_plaza,
address$coordinates.address,
day_week,
day_number
)
# create map
map <- leaflet(height = '100%') %>%
addTiles() %>%
addMarkers(
lng = as.double(address$coordinates.lng),
lat = as.double(address$coordinates.lat),
popup = paste(paste('<b>Name:</b>', input$id_toll_plaza, sep = ' '),
paste('<b>Address:</b>', address$coordinates.address, sep = ' '),
sep = '\n')
)
# render map
output$id_map_gpt <- renderUI({
div(
map,
style = 'height: 90vh; overflow-y: auto;'
)
})
# show week picker
output$id_week <- renderUI({
selectInput(
inputId = 'id_week_of_day',
width = '100%',
label = 'Week of the day',
choices = list('Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday', 'Sunday'),
selected = day_week,
multiple = FALSE
)
})
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '300px'),
deleteFile = FALSE
)
}
)
# week of the day picker
observeEvent(
input$id_week_of_day, {
# get day of week
if (input$id_week_of_day != day_week) {
day_number <- get_week_of_day(input$id_week_of_day)
# get place information
df_place <- popular_times_graph(
input$id_toll_plaza,
address$coordinates.address,
input$id_week_of_day,
day_number
)
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '300px'),
deleteFile = FALSE
)
} else {
# clear day_week
day_week <<- ''
}
}
)
}
shinyApp(ui = ui, server = server)
