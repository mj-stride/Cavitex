multiple = FALSE
)
})
# delete file
# create 2 graph file, remove redundant file
if (file.exists(df_place$file)) {
file.remove(df_place$file)
}
# show map
output$id_map <- renderLeaflet({
leaflet(height = "100%") %>%
addTiles() %>%
addMarkers(
data = df_place,
lng = ~lat,
lat = ~lon,
popup = paste(paste("<b>Name:</b>", df_place$place_name, sep = " "),
paste("<b>Address:</b>", df_place$address, sep = " "),
sep = "\n")
)
})
} else {
# invalid place name and address
showModal(
modalDialog(
title = "Failed to load map",
"Invalid place name and/or address.",
easyClose = TRUE,
footer = div(
modalButton("Close")
)
)
)
}
} else {
# empty address
showModal(
modalDialog(
title = "Failed to search place",
"Address should not be left blank.",
easyClose = TRUE,
footer = div(
modalButton("Close")
)
)
)
}
} else {
# empty place name
showModal(
modalDialog(
title = "Failed to search place",
"Place name should not be left blank.",
easyClose = TRUE,
footer = div(
modalButton("Close")
)
)
)
}
}
)
# week of the day picker
observeEvent(
input$id_week_of_day, {
# get day of week
# day_week <- weekdays(Sys.Date())
day_number <- get_week_of_day(input$id_week_of_day)
# get place information
df_place <- popular_times_graph(
place_name,
place_address,
input$id_week_of_day,
day_number
)
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = "100%", height = "400px"),
deleteFile = FALSE
)
}
)
}
shinyApp(ui = ui, server = server)
get_week_of_day <-function(day) {
if (day == 'Monday') {
return(1)
} else if (day == 'Tuesday') {
return(2)
} else if (day == 'Wednesday') {
return(3)
} else if (day == 'Thursday') {
return(4)
} else if (day == 'Friday') {
return(5)
} else if (day == 'Saturday') {
return(6)
} else if (day == 'Sunday') {
return(7)
}
}
# install.packages('remotes')
# remotes::install_github('JosiahParry/populartimes')
library(populartimes)
# get google popular times
popular_times_graph <- function(place_name, address, day_week, day_number) {
out <- tryCatch(
{
# get place details
get_place <- poptimes_from_address(place_name, address)
df_place <- as.data.frame(get_place) %>%
mutate(place_name = place_name) %>%
mutate(address = address) %>%
mutate(status = 200) # add place name and address for marker popup
# get popular times
popular_times <- as.data.frame(get_place$popular_times)
day_popularity <- subset(popular_times,
day_of_week == day_number,
select = c(hour, popularity))
# sort popularity by hour
s_popularity <- day_popularity[order(day_popularity$hour),]
# convert hour to 12 hour time
df_popularity <- s_popularity %>%
mutate(time = format(strptime(paste(hour, ':00:00', sep = ''), format = '%H:%M:%S'), '%I %p'))
# select popularity
popularity <- df_popularity %>% select(popularity)
# popularity <- day_popularity %>% select(popularity)
# select popularity time
time <- df_popularity %>% select(time)
# hour <- day_popularity %>% select(hour)
# graph name (popularity_date_time)
file_name <- format(Sys.time(), 'popularity_%Y%m%d_%H%M%S')
file_path <- 'D:\\Codes\\r_cavitex\\google_popular_times\\bar_graphs\\'
# paste directory; file_name; extension
graph_file <- paste(file_path, file_name, '.png', sep = '')
# graph png file; png size
png(file = graph_file, height = 800, width = 1500, units = 'px')
# create bar graph
barplot.default(
popularity$popularity,
names.arg = time$time,
# names.arg = hour$hour,
ylab = 'Popularity',
xlab = 'Hour',
main = paste(place_name, ' - ', day_week),
col = '#46923C'
)
# save as png file
while (!is.null(dev.list())) dev.off()
# add file
return(df_place %>% mutate(
file = graph_file
))
},
error = function(cond) {
status <- c(500)
err <- data.frame(status)
return(err)
},
warning = function(cond) {
status <- c(500)
err <- data.frame(status)
return(err)
},
finally = {
message('Finally')
}
)
return(out)
}
# install.packages('shiny')
# r file
source('D:\\Codes\\r_cavitex\\google_popular_times\\get_week_of_day.R')
source('D:\\Codes\\r_cavitex\\google_popular_times\\google_popular_times.R')
library(shiny)
library(tidyverse)
library(leaflet)
# html ui
ui <- fillPage(
tags$head(
tags$style(
HTML(
'body { height: 100%; background-color: white; }',
'.fill-25 { float: left; width: 40%; height: 100%; }',
'.fill-75 { float: right; width: 60%; height: 100%;}',
'#id_search { float: right; background-color: #46923C; color: white; border: 2px solid #46923C }'
)
)
),
# left panel
div(
class = 'fill-25',
# search
div(
style = 'padding: 10px; margin-bottom: 30px',
h3('Google Popular Times', style = 'font-weight: bold; color: #46923C;'), # title
textInput(inputId = 'id_place_name', label = 'Place name', width = '100%'), # place name
textInput(inputId = 'id_address', label = 'Address', width = '100%'), # address
actionButton(inputId = 'id_search', label = 'Search'), # button
),
# week picker
div(
style = 'padding: 10px;',
uiOutput(outputId = 'id_week'),
),
# graph
imageOutput(outputId = 'id_graph')
),
# right panel
# map
div(
id = 'id_map_default',
class = 'fill-75',
leafletOutput(outputId = 'id_map', width = '100%', height = '100%')
)
)
# html function
server <- function(input, output, session) {
# default map view
output$id_map <- renderLeaflet({
leaflet(height = '100%') %>%
addTiles() %>%
setView(
lng = 121.7740,
lat = 12.8797,
zoom = 6
)
})
# search place; show map
observeEvent(
input$id_search, {
# get text input
place_name <<- input$id_place_name
place_address <<- input$id_address
# search place information checker
if (place_name != '') {
if (place_address != '') {
# get day of week
day_week <- weekdays(Sys.Date())
day_number <- get_week_of_day(day_week)
# get place information
df_place <- popular_times_graph(
place_name,
place_address,
day_week,
day_number
)
if (df_place$status != 500) {
# show week picker
output$id_week <- renderUI({
selectInput(
inputId = 'id_week_of_day',
width = '100%',
label = 'Week of the day',
choices = list('Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday', 'Sunday'),
selected = day_week,
multiple = FALSE
)
})
# delete file
# create 2 graph file, remove redundant file
if (file.exists(df_place$file)) {
file.remove(df_place$file)
}
# show map
output$id_map <- renderLeaflet({
leaflet(height = '100%') %>%
addTiles() %>%
addMarkers(
data = df_place,
lng = ~lat,
lat = ~lon,
popup = paste(paste('<b>Name:</b>', df_place$place_name, sep = ' '),
paste('<b>Address:</b>', df_place$address, sep = ' '),
sep = '\n')
)
})
} else {
# invalid place name and address
showModal(
modalDialog(
title = 'Failed to load map',
'Invalid place name and/or address.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
} else {
# empty address
showModal(
modalDialog(
title = 'Failed to search place',
'Address should not be left blank.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
} else {
# empty place name
showModal(
modalDialog(
title = 'Failed to search place',
'Place name should not be left blank.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
}
)
# week of the day picker
observeEvent(
input$id_week_of_day, {
# get day of week
# day_week <- weekdays(Sys.Date())
day_number <- get_week_of_day(input$id_week_of_day)
# get place information
df_place <- popular_times_graph(
place_name,
place_address,
input$id_week_of_day,
day_number
)
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '400px'),
deleteFile = FALSE
)
}
)
}
shinyApp(ui = ui, server = server)
# install.packages('shiny')
# r file
source('D:\\Codes\\r_cavitex\\google_popular_times\\get_week_of_day.R')
source('D:\\Codes\\r_cavitex\\google_popular_times\\google_popular_times.R')
library(shiny)
library(tidyverse)
library(leaflet)
# html ui
ui <- fillPage(
tags$head(
tags$style(
HTML(
'body { height: 100%; background-color: white; }',
'.fill-25 { float: left; width: 40%; height: 100%; }',
'.fill-75 { float: right; width: 60%; height: 100%;}',
'#id_search { float: right; background-color: #46923C; color: white; border: 2px solid #46923C }'
)
)
),
# left panel
div(
class = 'fill-25',
# search
div(
style = 'padding: 10px; margin-bottom: 30px',
h3('Google Popular Times', style = 'font-weight: bold; color: #46923C;'), # title
textInput(inputId = 'id_place_name', label = 'Place name', width = '100%'), # place name
textInput(inputId = 'id_address', label = 'Address', width = '100%'), # address
actionButton(inputId = 'id_search', label = 'Search'), # button
),
# week picker
div(
style = 'padding: 10px;',
uiOutput(outputId = 'id_week'),
),
# graph
imageOutput(outputId = 'id_graph')
),
# right panel
# map
div(
id = 'id_map_default',
class = 'fill-75',
leafletOutput(outputId = 'id_map', width = '100%', height = '100%')
)
)
# html function
server <- function(input, output, session) {
# default map view
output$id_map <- renderLeaflet({
leaflet(height = '100%') %>%
addTiles() %>%
setView(
lng = 121.7740,
lat = 12.8797,
zoom = 6
)
})
# search place; show map
observeEvent(
input$id_search, {
# get text input
place_name <<- input$id_place_name
place_address <<- input$id_address
# search place information checker
if (place_name != '') {
if (place_address != '') {
# get day of week
day_week <- weekdays(Sys.Date())
day_number <- get_week_of_day(day_week)
# get place information
df_place <- popular_times_graph(
place_name,
place_address,
day_week,
day_number
)
if (df_place$status != 500) {
# show week picker
output$id_week <- renderUI({
selectInput(
inputId = 'id_week_of_day',
width = '100%',
label = 'Week of the day',
choices = list('Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday', 'Sunday'),
selected = day_week,
multiple = FALSE
)
})
# delete file
# create 2 graph file, remove redundant file
if (file.exists(df_place$file)) {
file.remove(df_place$file)
}
# show map
output$id_map <- renderLeaflet({
leaflet(height = '100%') %>%
addTiles() %>%
addMarkers(
data = df_place,
lng = ~lat,
lat = ~lon,
popup = paste(paste('<b>Name:</b>', df_place$place_name, sep = ' '),
paste('<b>Address:</b>', df_place$address, sep = ' '),
sep = '\n')
)
})
} else {
# invalid place name and address
showModal(
modalDialog(
title = 'Failed to load map',
'Invalid place name and/or address.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
} else {
# empty address
showModal(
modalDialog(
title = 'Failed to search place',
'Address should not be left blank.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
} else {
# empty place name
showModal(
modalDialog(
title = 'Failed to search place',
'Place name should not be left blank.',
easyClose = TRUE,
footer = div(
modalButton('Close')
)
)
)
}
}
)
# week of the day picker
observeEvent(
input$id_week_of_day, {
# get day of week
# day_week <- weekdays(Sys.Date())
day_number <- get_week_of_day(input$id_week_of_day)
# get place information
df_place <- popular_times_graph(
place_name,
place_address,
input$id_week_of_day,
day_number
)
# show bar graph
output$id_graph <- renderImage(
list(src = df_place$file, width = '100%', height = '300px'),
deleteFile = FALSE
)
}
)
}
shinyApp(ui = ui, server = server)
